// Generated by gencpp from file saturn_msgs/ObstacleState.msg
// DO NOT EDIT!


#ifndef SATURN_MSGS_MESSAGE_OBSTACLESTATE_H
#define SATURN_MSGS_MESSAGE_OBSTACLESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <saturn_msgs/StateLite.h>

namespace saturn_msgs
{
template <class ContainerAllocator>
struct ObstacleState_
{
  typedef ObstacleState_<ContainerAllocator> Type;

  ObstacleState_()
    : header()
    , id(0)
    , name()
    , predicted_states()  {
    }
  ObstacleState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , name(_alloc)
    , predicted_states(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector< ::saturn_msgs::StateLite_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::saturn_msgs::StateLite_<ContainerAllocator> >> _predicted_states_type;
  _predicted_states_type predicted_states;





  typedef boost::shared_ptr< ::saturn_msgs::ObstacleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::saturn_msgs::ObstacleState_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleState_

typedef ::saturn_msgs::ObstacleState_<std::allocator<void> > ObstacleState;

typedef boost::shared_ptr< ::saturn_msgs::ObstacleState > ObstacleStatePtr;
typedef boost::shared_ptr< ::saturn_msgs::ObstacleState const> ObstacleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::saturn_msgs::ObstacleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::saturn_msgs::ObstacleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::saturn_msgs::ObstacleState_<ContainerAllocator1> & lhs, const ::saturn_msgs::ObstacleState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.predicted_states == rhs.predicted_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::saturn_msgs::ObstacleState_<ContainerAllocator1> & lhs, const ::saturn_msgs::ObstacleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace saturn_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::saturn_msgs::ObstacleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::saturn_msgs::ObstacleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::saturn_msgs::ObstacleState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d45e6ca6695835598d9ff9ee662af118";
  }

  static const char* value(const ::saturn_msgs::ObstacleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd45e6ca669583559ULL;
  static const uint64_t static_value2 = 0x8d9ff9ee662af118ULL;
};

template<class ContainerAllocator>
struct DataType< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "saturn_msgs/ObstacleState";
  }

  static const char* value(const ::saturn_msgs::ObstacleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"int32 id\n"
"string name\n"
"StateLite[] predicted_states\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: saturn_msgs/StateLite\n"
"std_msgs/Header header\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"float64 v\n"
"float64 accel\n"
"float64 yawrate\n"
;
  }

  static const char* value(const ::saturn_msgs::ObstacleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.predicted_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::saturn_msgs::ObstacleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::saturn_msgs::ObstacleState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "predicted_states[]" << std::endl;
    for (size_t i = 0; i < v.predicted_states.size(); ++i)
    {
      s << indent << "  predicted_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::saturn_msgs::StateLite_<ContainerAllocator> >::stream(s, indent + "    ", v.predicted_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SATURN_MSGS_MESSAGE_OBSTACLESTATE_H
