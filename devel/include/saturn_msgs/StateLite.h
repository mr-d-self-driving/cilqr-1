// Generated by gencpp from file saturn_msgs/StateLite.msg
// DO NOT EDIT!


#ifndef SATURN_MSGS_MESSAGE_STATELITE_H
#define SATURN_MSGS_MESSAGE_STATELITE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace saturn_msgs
{
template <class ContainerAllocator>
struct StateLite_
{
  typedef StateLite_<ContainerAllocator> Type;

  StateLite_()
    : header()
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , v(0.0)
    , accel(0.0)
    , yawrate(0.0)  {
    }
  StateLite_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , v(0.0)
    , accel(0.0)
    , yawrate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _v_type;
  _v_type v;

   typedef double _accel_type;
  _accel_type accel;

   typedef double _yawrate_type;
  _yawrate_type yawrate;





  typedef boost::shared_ptr< ::saturn_msgs::StateLite_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::saturn_msgs::StateLite_<ContainerAllocator> const> ConstPtr;

}; // struct StateLite_

typedef ::saturn_msgs::StateLite_<std::allocator<void> > StateLite;

typedef boost::shared_ptr< ::saturn_msgs::StateLite > StateLitePtr;
typedef boost::shared_ptr< ::saturn_msgs::StateLite const> StateLiteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::saturn_msgs::StateLite_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::saturn_msgs::StateLite_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::saturn_msgs::StateLite_<ContainerAllocator1> & lhs, const ::saturn_msgs::StateLite_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta &&
    lhs.v == rhs.v &&
    lhs.accel == rhs.accel &&
    lhs.yawrate == rhs.yawrate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::saturn_msgs::StateLite_<ContainerAllocator1> & lhs, const ::saturn_msgs::StateLite_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace saturn_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::saturn_msgs::StateLite_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::saturn_msgs::StateLite_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::saturn_msgs::StateLite_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::saturn_msgs::StateLite_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::saturn_msgs::StateLite_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::saturn_msgs::StateLite_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::saturn_msgs::StateLite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba1bc11b4171df17ca21a86d7befcbeb";
  }

  static const char* value(const ::saturn_msgs::StateLite_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba1bc11b4171df17ULL;
  static const uint64_t static_value2 = 0xca21a86d7befcbebULL;
};

template<class ContainerAllocator>
struct DataType< ::saturn_msgs::StateLite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "saturn_msgs/StateLite";
  }

  static const char* value(const ::saturn_msgs::StateLite_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::saturn_msgs::StateLite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"float64 v\n"
"float64 accel\n"
"float64 yawrate\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::saturn_msgs::StateLite_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::saturn_msgs::StateLite_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.v);
      stream.next(m.accel);
      stream.next(m.yawrate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateLite_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::saturn_msgs::StateLite_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::saturn_msgs::StateLite_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "accel: ";
    Printer<double>::stream(s, indent + "  ", v.accel);
    s << indent << "yawrate: ";
    Printer<double>::stream(s, indent + "  ", v.yawrate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SATURN_MSGS_MESSAGE_STATELITE_H
